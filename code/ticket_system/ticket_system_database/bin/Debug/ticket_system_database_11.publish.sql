/*
Deployment script for ticket_system_database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ticket_system_database"
:setvar DefaultFilePrefix "ticket_system_database"
:setvar DefaultDataPath "C:\Users\Jgain\AppData\Local\Microsoft\VisualStudio\SSDT\"
:setvar DefaultLogPath "C:\Users\Jgain\AppData\Local\Microsoft\VisualStudio\SSDT\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column password on table [dbo].[users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column userId on table [dbo].[users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column username on table [dbo].[users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[users]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_users] (
    [Id]       INT            NOT NULL,
    [userId]   NVARCHAR (50)  NOT NULL,
    [username] NVARCHAR (MAX) NOT NULL,
    [password] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Users])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_users] ([Id], [UserId], [Username], [Password])
        SELECT   [Id],
                 [UserId],
                 [Username],
                 [Password]
        FROM     [dbo].[Users]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[Users];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_users]', N'users';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[employee]...';


GO
CREATE TABLE [dbo].[employee] (
    [e_id]            INT           NOT NULL,
    [f_name]          VARCHAR (MAX) NOT NULL,
    [l_name]          VARCHAR (MAX) NOT NULL,
    [username]        VARCHAR (MAX) NOT NULL,
    [hashed_password] VARCHAR (MAX) NOT NULL,
    [is_active]       BIT           NOT NULL,
    [is_manager]      BIT           NOT NULL,
    [is_admin]        BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([e_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[group]...';


GO
CREATE TABLE [dbo].[group] (
    [g_id]          INT           NOT NULL,
    [manager_id]    INT           NOT NULL,
    [g_name]        VARCHAR (MAX) NOT NULL,
    [g_description] VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([g_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[group_member]...';


GO
CREATE TABLE [dbo].[group_member] (
    [g_id] INT NOT NULL,
    [e_id] INT NOT NULL,
    CONSTRAINT [PK_group_member] PRIMARY KEY CLUSTERED ([g_id] ASC, [e_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[project]...';


GO
CREATE TABLE [dbo].[project] (
    [p_id]            INT           NOT NULL,
    [project_lead_id] INT           NOT NULL,
    [p_title]         VARCHAR (MAX) NOT NULL,
    [p_description]   TEXT          NOT NULL,
    PRIMARY KEY CLUSTERED ([p_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[project_group]...';


GO
CREATE TABLE [dbo].[project_group] (
    [p_id] INT NOT NULL,
    [g_id] INT NOT NULL,
    CONSTRAINT [PK_project_group] PRIMARY KEY CLUSTERED ([p_id] ASC, [g_id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_group_To_employee]...';


GO
ALTER TABLE [dbo].[group] WITH NOCHECK
    ADD CONSTRAINT [FK_group_To_employee] FOREIGN KEY ([manager_id]) REFERENCES [dbo].[employee] ([e_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_group_member_To_group]...';


GO
ALTER TABLE [dbo].[group_member] WITH NOCHECK
    ADD CONSTRAINT [FK_group_member_To_group] FOREIGN KEY ([g_id]) REFERENCES [dbo].[group] ([g_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_group_member_To_employee]...';


GO
ALTER TABLE [dbo].[group_member] WITH NOCHECK
    ADD CONSTRAINT [FK_group_member_To_employee] FOREIGN KEY ([e_id]) REFERENCES [dbo].[employee] ([e_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_project_To_employee]...';


GO
ALTER TABLE [dbo].[project] WITH NOCHECK
    ADD CONSTRAINT [FK_project_To_employee] FOREIGN KEY ([project_lead_id]) REFERENCES [dbo].[employee] ([e_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_project_group_To_project]...';


GO
ALTER TABLE [dbo].[project_group] WITH NOCHECK
    ADD CONSTRAINT [FK_project_group_To_project] FOREIGN KEY ([p_id]) REFERENCES [dbo].[project] ([p_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_project_group_To_group]...';


GO
ALTER TABLE [dbo].[project_group] WITH NOCHECK
    ADD CONSTRAINT [FK_project_group_To_group] FOREIGN KEY ([g_id]) REFERENCES [dbo].[group] ([g_id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[group] WITH CHECK CHECK CONSTRAINT [FK_group_To_employee];

ALTER TABLE [dbo].[group_member] WITH CHECK CHECK CONSTRAINT [FK_group_member_To_group];

ALTER TABLE [dbo].[group_member] WITH CHECK CHECK CONSTRAINT [FK_group_member_To_employee];

ALTER TABLE [dbo].[project] WITH CHECK CHECK CONSTRAINT [FK_project_To_employee];

ALTER TABLE [dbo].[project_group] WITH CHECK CHECK CONSTRAINT [FK_project_group_To_project];

ALTER TABLE [dbo].[project_group] WITH CHECK CHECK CONSTRAINT [FK_project_group_To_group];


GO
PRINT N'Update complete.';


GO
